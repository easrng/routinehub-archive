{"id":"10927","name":"Crypt","tagline":"One Time Pad Concept","icon":"ios14 c946986751 g59826","latest":"32134","description":"\n\t\t\t\t\t<p>The python equivalent of this shortcut may be found on github <a href=\"https://github.com/kittyjosh111/crypt\">https://github.com/kittyjosh111/crypt</a>. That version can run on anything with support for python3.</p>\n<h2>Usage</h2>\n<p>Download the shortcut. Follow the prompts given. If you want to pass in a text file to encrypt, activate Crypt from the file's share sheet.</p>\n<h2>About</h2>\n<p>This shortcut is meant to provide a sort of encryption for simple messages. Say you want to send someone a text message without someone else being able to read it. You can use this shortcut to send a string of numbers containing the message.</p>\n<p>This shortcut was based off of the concept of OTP (One Time Pad), so each letter of message is randomly altered; this shortcut uses simple math. As I have not extensively studied encryption methods, I could be completely wrong about OTP. The shortcut seems to work anyway.</p>\n<p>The TLDR of the mechanism:</p>\n<ul>\n<li>\n<p>Split message into letters, spaces, basic punctuation</p>\n</li>\n<li>\n<p>Assign numeric value to each split item (ASCII)</p>\n</li>\n<li>\n<p>Randomly generate number as key</p>\n</li>\n<li>\n<p>Add said random key to aforementioned number</p>\n</li>\n</ul>\n<h2>Example</h2>\n<p>For example, let's encrypt the string \"hello\". The shortcut will split each letter apart, creating a list of </p>\n<pre><code>h\ne\nl\nl\no\n</code></pre>\n\n<p>Each character is then converted to ASCII, which becomes </p>\n<pre><code>104\n101\n105\n105\n111\n</code></pre>\n\n<p>For each number, a random \"key\" is generated, which is a random integer from 2 to 750, wihch is then added to the number in the ASCII list. If for example our keys were generated as </p>\n<pre><code>1\n2\n1\n3\n4\n</code></pre>\n\n<p>then our final encrypted message is:</p>\n<pre><code>104 + 1 = 105\n101 + 2 = 103\n105 + 1 = 106\n105 + 3 = 108\n111 + 4 = 115\n</code></pre>\n\n<p>Then the encrypted message and the key are combined with colons and exported.</p>\n<pre><code>encrypted message = 105:103:106:108:115\nfinal key = 1:2:1:3:4\n</code></pre>\n\n<p>To decrypt, run the process in reverse.</p>\n<pre><code>105 - 1 = 104 = h\n103 - 2 = 101 = e\n106 - 1 = 105 = l\n108 - 3 = 105 = l\n115 - 4 = 111 = o\n</code></pre>\n\t\t\t\t","releasenotes":"<p><strong>3.0 - March 6, 2022, 9:29 a.m.</strong></p><p>- removed shared key because it was pointless<br>- reworked manipulation to use addition instead of multiplication, as encrypted strings were very long</p>"}