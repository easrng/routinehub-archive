{"id":"7183","name":"Calculate Expression [JS1]","tagline":"A JavaScript one-liner version of iOS 14's \"Calculate Expression\"","icon":"ios12 c255 g59680","latest":"22246","description":"\n\t\t\t\t\t<p>A single line of JavaScript that allows to calculate a mathematical expression using the syntax of the new \"Calculate Expression\" action in iOS 14. This is slower than the new action, but it enables <strong>compatibility with iOS 12/13</strong>. It is also more <a href=\"https://twitter.com/atnbueno/status/1448740402367012870\">reliable</a> ðŸ˜ˆ.</p>\n<p>Almost all operators and functions can be used (see below for exceptions and workarounds). As in the new action, the script requires using the <strong>period as decimal separator</strong>. If Shortcuts is used in a language that use a different separator (e.g. comma in Spanish), replacing it by a period will be needed before using the script.</p>\n<p>Thanks to <a href=\"https://routinehub.co/user/gluebyte\">u/gluebyte</a> for his <a href=\"https://www.reddit.com/r/shortcuts/comments/ivm4ja/functions_and_operators_supported_in_calculate/\">post and comments about the supported operations and expressions</a>.</p>\n<ul>\n<li>No error checking</li>\n<li><a href=\"https://editor.scpl.dev/?scpl=%40Icon%20calculator%0A%40Color%20darkgray%0AComment%20%22A%20JavaScript%20one-liner%20to%20calculate%20an%20expression%20using%20the%20syntax%20of%20the%20new%20%E2%80%9CCalculate%20Expression%E2%80%9D%20action%20in%20iOS%2014%20%E2%80%94%20%40atnbueno%20%282020-10-25%29%5Cn%5Cn-%20This%20is%20slower%20than%20the%20new%20action%20but%20it%20allows%20compatibility%20with%20iOS%2012%2F13%5Cn-%20As%20in%20the%20new%20action%2C%20languages%20that%20use%20a%20decimal%20separator%20different%20than%20the%20period%20require%20replacing%20it%20before%20calculating%20an%20expression%5Cn-%20No%20error%20checking%22%0AText%20%2216%3E%3E3%202%2A%2A3%202%3C%3C3%203%252%203%2A2%203%2B2%203-2%203%2F2%20acos%28-1%29%2Fpi%20acosd%28-1%29%20acosh%281%29%20asin%281%29%2Fpi%20asind%281%29%20asinh%280%29%20atan%281%29%2Fpi%20atand%281%29%20atanh%280%29%20cbrt%288%29%20ceil%282.5%29%20cos%28pi%29%20cosd%28180%29%20cosh%280%29%20exp%281%29%2Fe%20fabs%28-1%29%20fact%285%29%20floor%282.5%29%20ln%28e%29%20log%28100%29%20rint%282.5%29%20sin%28pi%2F2%29%20sind%2890%29%20sinh%280%29%20sqrt%2816%29%20tan%28pi%2F4%29%20tand%2845%29%20tanh%280%29%22%0ASplitText%20separator%3DCustom%20custom%3D%22%20%22%0ARepeatwithEach%0A%09URL%20%22data%3Atext%2Fhtml%2C%3Cscript%3Ewith%28Math%29%7Be%3DE%3Bpi%3DPI%3Br%3D180%2Fpi%3Basind%3Dx%3D%3Easin%28x%29%2Ar%3Bacosd%3Dx%3D%3Eacos%28x%29%2Ar%3Batand%3Dx%3D%3Eatan%28x%29%2Ar%3Bcosd%3Dx%3D%3Ecos%28x%2Fr%29%3Bfabs%3Dabs%3Bfact%3Dn%3D%3En%3Fn%2Afact%28n-1%29%3A1%3Bln%3Dlog%3Blog%3Dlog10%3Brint%3Dx%3D%3E%28x-floor%28x%29%21%3D.5%29%3Fround%28x%29%3A2%2Around%28x%2F2%29%3Bsind%3Dx%3D%3Esin%28x%2Fr%29%3Btand%3Dx%3D%3Etan%28x%2Fr%29%3Bdocument.write%28%60%7B%5C%22result%5C%22%3A%24%7Beval%28%5C%28v%3A%22Repeat%20Item%22%29%29%7D%7D%60%29%7D%3C%2Fscript%3E%22%0A%09GetFileofType%20%22com.apple.webarchive%22%0A%09GetTextfromInput%0A%09GetDictionaryfromInput%20-%3E%20mv%3A%22Get%20Dictionary%20from%20Input%22%0A%09Text%20%22%5C%28v%3A%22Repeat%20Index%22%29%3A%20%5C%28v%3A%22Repeat%20Item%22%29%20%3D%20%5C%28mv%3A%22Get%20Dictionary%20from%20Input%22.result%29%22%20-%3E%20mv%3AText%0AEnd%0ACombineText%20separator%3D%22New%20Lines%22%20-%3E%20mv%3A%22Combine%20Text%22%0AShowResult%20mv%3A%22Combine%20Text%22\">ScPL source</a></li>\n<li><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Math\"><code>Math</code> documentation at MDN</a></li>\n</ul>\n<h4>Supported constants, operators and functions</h4>\n<ul>\n<li><code>e</code></li>\n<li><code>pi</code></li>\n<li><code>+</code></li>\n<li><code>-</code></li>\n<li><code>*</code></li>\n<li><code>/</code></li>\n<li><code>%</code> <em>- remainder (modulo)</em></li>\n<li><code>**</code> <em>- power, use it instead of <code>^</code> or <code>pow()</code></em></li>\n<li><code>&lt;&lt;</code> <em>- bitwise left shift</em></li>\n<li><code>&gt;&gt;</code> <em>- bitwise right shift</em></li>\n<li><code>acos()</code></li>\n<li><code>acosd()</code> <em>- outputs degrees instead of radians</em></li>\n<li><code>acosh()</code></li>\n<li><code>asin()</code></li>\n<li><code>asind()</code> <em>- outputs degrees instead of radians</em></li>\n<li><code>asinh()</code></li>\n<li><code>atan()</code></li>\n<li><code>atand()</code> <em>- outputs degrees instead of radians</em></li>\n<li><code>atanh()</code></li>\n<li><code>cbrt()</code> <em>- cubic root</em></li>\n<li><code>ceil()</code></li>\n<li><code>cos()</code></li>\n<li><code>cosd()</code> <em>- uses degrees instead of radians</em></li>\n<li><code>cosh()</code></li>\n<li><code>exp()</code></li>\n<li><code>fabs()</code> <em>- absolute value</em></li>\n<li><code>fact()</code> <em>- use it instead of the <code>!</code> operator</em></li>\n<li><code>floor()</code></li>\n<li><code>ln()</code></li>\n<li><code>log()</code></li>\n<li><code>rint()</code> <em>- rounds to nearest integer, choosing even if midway</em></li>\n<li><code>sin()</code></li>\n<li><code>sind()</code> <em>- uses degrees instead of radians</em></li>\n<li><code>sinh()</code></li>\n<li><code>sqrt()</code></li>\n<li><code>tan()</code></li>\n<li><code>tand()</code> <em>- uses degrees instead of radians</em></li>\n<li><code>tanh()</code></li>\n</ul>\n<p>Some of these functions are not natively supported in JavaScript (e.g. <code>fact()</code>, <code>rint()</code>), or they have another names (e.g. <code>fabs()</code>, <code>ln()</code>). This has been solved by (re)defining them before calculating the expression.</p>\n<h4>Unsupported operators and functions</h4>\n<ul>\n<li>Binary bitwise operators <em>- \"Calculate expression\" uses <code>and</code>, <code>or</code>, <code>not</code>, and <code>xor</code>; and JavaScript uses <code>&amp;</code>, <code>|</code>, <code>~</code>, and <code>^</code></em></li>\n<li>Two-parameter functions (e.g. <code>pow</code>, <code>hypot</code>) <em>- ommited to avoid conflicts with non-period separators, and because they can be replaced by arithmetic operations</em></li>\n<li>Other functions: <em><code>lgamma</code>, <code>erf</code>, and <code>erfc</code> are not supported due to their complexity and limited use</em></li>\n</ul>\n<h4>Don't download the shortcut</h4>\n<p>If you just want the code, there's no need to download the shortcut. Copy this and paste it in a \"URL\" action:</p>\n<pre><code>data:text/html,&lt;script&gt;with(Math){e=E;pi=PI;r=180/pi;asind=x=&gt;asin(x)*r;acosd=x=&gt;acos(x)*r;atand=x=&gt;atan(x)*r;cosd=x=&gt;cos(x/r);fabs=abs;fact=n=&gt;n?n*fact(n-1):1;ln=log;log=log10;rint=x=&gt;(x-floor(x)!=.5)?round(x):2*round(x/2);sind=x=&gt;sin(x/r);tand=x=&gt;tan(x/r);document.write(`{\"result\":${eval('REPLACEWITHEXPRESSIONVARIABLE')}}`)}&lt;/script&gt;\n</code></pre>\n\n<p>Replace the <code>REPLACEWITHEXPRESSIONVARIABLE</code> fragment with the variable contaning the expression, add a \"Get File of Type\" with type <code>com.apple.webarchive</code> below, convert it to text, then to a dictionary, and get the value of the \"result\" key to obtain the result of the expression (with the proper decimal separator).</p>\n<p>I use \"Get File of Type\" instead of \"Get Contents of Webpage\" to avoid that the user is misleading told that the shortcut uses Safari.</p>\n\t\t\t\t","releasenotes":"<p><strong>1.0.0 - Oct. 25, 2020, 6:09 a.m.</strong></p>"}