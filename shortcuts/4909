{"id":"4909","name":"PassKit Integration Demo","tagline":"An example of integration with PassKit.","icon":"ios14 c431817727 g59818","latest":"20953","description":"\n\t\t\t\t\t<h4>An example of integration with PassKit, for developers.</h4>\n\n<p>Please download <a href=\"https://routinehub.co/shortcut/4907\">Passkit.</a></p>\n\n<p><br>\n</p><h5>Info for developers:</h5>\n<p>Include the shortcut name as <code>Shortcut Name</code></p><p></p>\n<p>If you would like to pass the password in from another shortcut, (for whatever reason,) You can include the password the user inputs in a value <code>Pass_Input</code>, or <code>Pass Input</code>.</p>\n\n<p>If you would like to test PassKit’s installed version, pass <code>Test Version</code> as a boolean set to True. The shortcut will return the version and nothing else.</p>\n\n<p>If you would like to test if your shortcut’s password has been set in PassKit, pass <code>CheckExists</code> as a boolean set to true, along with your shortcut’s name. (<code>Shortcut Name</code>, string.) This will return the string <code>True</code> if your shortcut’s password is set, or <code>False</code> if your shortcut’s password is not set.\n\n</p><p>To prompt users to set a Facade Password, set a boolean <code>Facade</code> to True. Where the comment says to make your facade mode code, either code a new version of the shortcut that looks real but is not, or change a variable that changes everything else up. (such as changing the directory it uses for file saving, that kinda thing.) If you go with the latter, remember to remove the ‘exit shortcut’ action, as your code will continue, (though with minor alterations.)</p>\n\n<p>As an optional additional security feature, use <a href=\"https://routinehub.co/shortcut/7176/\">this demo</a> instead.</p>\n\t\t\t\t","releasenotes":"<p><strong>4.6 - Sept. 23, 2020, 6:20 a.m.</strong></p><p>iOS 14</p>"}