{"id":"9267","name":"IF","tagline":"Evaluate Multiple Condition IF Statements in an Familiar \"Programming Language-Like\" Style.","icon":"ios14 c4292093695 g59696","latest":"27780","description":"\n\t\t\t\t\t<p><img alt=\"Image showing use of Compound IF Test\" src=\"https://i.imgur.com/LELRUrF_d.webp?maxwidth=640&amp;shape=thumb&amp;fidelity=medium\"></p>\n<h5>Say you want multiple things to be true or have an alternative scenario that can also be true as follows:</h5>\n<ul>\n<li>Temperature is greater than 10°C </li>\n</ul>\n<p><strong>AND</strong></p>\n<ul>\n<li>Lights are on</li>\n</ul>\n<p><strong>OR</strong></p>\n<ul>\n<li>Distance to home is less than 100m</li>\n</ul>\n<p>You can evaluate this without having to include nested IFs by using this shortcut.</p>\n<h1>Description and Parameters 📖</h1>\n<h5>To declare a statement for evaluation the syntax is as follows:</h5>\n<pre><code>NUMBER :OPERATOR: NUMBER\n</code></pre>\n<p>Example: </p>\n<pre><code>🔟 :==: 🔟\n</code></pre>\n<p>Or:</p>\n<pre><code>NUMBER\n</code></pre>\n<p>Example:</p>\n<pre><code>🔟\n</code></pre>\n<p>These statements can then be combined using logical and (<strong>&amp;&amp;</strong>) and logical or (<strong>||</strong>) as follows: </p>\n<pre><code>🔟 :==: 🔟 &amp;&amp; 9️⃣ : !=: 9️⃣ || 2️⃣ :==: 2️⃣\n</code></pre>\n<h5>The full list of operators is as follows:</h5>\n<ul>\n<li><strong>==</strong> Equal To </li>\n<li><strong>!=</strong>  Unequal To</li>\n<li><strong>&lt;</strong>   Less Than</li>\n<li><strong>&gt;</strong>   Greater Than</li>\n<li><strong>&lt;=</strong> Less Than or Equal To</li>\n<li><strong>&gt;=</strong> Greater Than or Equal To</li>\n<li><strong>&amp;&amp;</strong> AND</li>\n<li><strong>||</strong>   OR </li>\n</ul>\n<h5>Please Note</h5>\n<p><strong>1. Don’t evaluate more than two variables against each other such as:</strong></p>\n<pre><code>1️⃣ :==: 3️⃣ :&lt;=: 5️⃣ :==: 0️⃣\n</code></pre>\n<p><strong>Instead you can write this as:</strong></p>\n<pre><code>1️⃣ :==: 3️⃣ &amp;&amp; 3️⃣ :&lt;=: 5️⃣ &amp;&amp; 5️⃣ :==: 0️⃣\n</code></pre>\n<p>Logically they mean the same thing however the function can’t handle the former.</p>\n<p><strong>2. You can pass a single variable for evaluation (without an operator) such as:</strong></p>\n<pre><code>🔟\n</code></pre>\n<p>In this case, it is the equivalent of <strong>testing for non-zero.</strong> False if zero, True otherwise.</p>\n<p>Following from this, you can include single variables in a larger statement such as:</p>\n<pre><code>🔟 &amp;&amp; 1️⃣ &amp;&amp; 0️⃣ || 1️⃣ :==: 1️⃣\n</code></pre>\n<p><strong>3. Check your inputs</strong></p>\n<p>Pass all inputs as numbers or variables that can be converted to numbers. Strings are not yet supported as they present ambiguity. This is because the shortcut itself accepts a string as an input and has to identify the operators. Passing strings as variables could result in improper identification of operators.</p>\n<p>Spaces have no effect when passing inputs however new lines do.</p>\n<p><strong><em>Tips:</em></strong></p>\n<ul>\n<li>Convert inputs to numbers. In most cases this can be done using simple maths or conversions. E.g Testing if lights are on you can use brightness :&gt;: 0 instead of passing their state “on” or “off”. However you could just easily convert “on” or “off” to 1 or 0. </li>\n<li>Emojis like 0️⃣ are used to denote variables being compared.</li>\n<li>The “:” delimiter is necessary for accurately distinguishing which input is which.</li>\n</ul>\n\t\t\t\t","releasenotes":"<p><strong>1.3 - May 30, 2021, 3:10 a.m.</strong></p><p>Changed the input syntax and added the greater than or equal to and less than or equal to operator. The syntax is made to be almost like C bar the “:” delimiter required for text formatting.</p>"}