{"id":"11582","name":"iMessage-Crypt","tagline":"Crypt implementation for iMessage","icon":"ios14 c4292093695 g59826","latest":"32743","description":"\n\t\t\t\t\t<h2>Usage</h2>\n<p>Download the shortcut. Make sure it is attached to the share sheet. Make sure you have iCloud Drive enabled.</p>\n<h2>About</h2>\n<p>This is an iMessage-only implementation of my other shortcut, Crypt. Crypt is meant to provide a sort of encryption for simple messages. Say you want to send someone a text message without someone else being able to read it. You can use this shortcut to send a string of numbers containing the message.</p>\n<p>To encrypt a message with iMessage-Crypt, either activate the shortcut without input from the share sheet, or just run the shortcut through Shortcuts.app. You will be asked to provide a string message. Once it is encrypted, the shortcut will create a zip file and save it to /Shortcuts/iMessage-Crypt/ in iCloud Drive with the following contents:</p>\n<ul>\n<li>\n<p>txt.txt (contains encoded message string, encoded again with base64)</p>\n</li>\n<li>\n<p>m4a.m4a (an audio file of Apple's notification ding. It's metadata contains the key encoded with base64 in the Artist field. The rest of the fields are filled with a random base64 encode)</p>\n</li>\n</ul>\n<p>This zip is then sent through iMessage, but you'll need to specify who to send it to. All files related to the zip are deleted after the iMessage is successfully sent.</p>\n<p>--</p>\n<p>To decrypt, select the zip file sent to you in iMessage and open the share sheet. Activate iMessage-Crypt from there.</p>\n<p>Decryption is done in reverse, with the shortcut extracting the archive and reading the content of both extracted files. The text and artist metadata are both base64 decoded, and used to recreate the unencrypted message.</p>\n<p>This shortcut was based off of the concept of OTP (One Time Pad), so each letter of message is randomly altered; this shortcut uses simple math. As I have not extensively studied encryption methods, I could be completely wrong about OTP. The shortcut seems to work anyway.</p>\n<p>The TLDR of the mechanism:</p>\n<ul>\n<li>\n<p>Split message into letters, spaces, basic punctuation</p>\n</li>\n<li>\n<p>Assign numeric value to each split item (ASCII)</p>\n</li>\n<li>\n<p>Randomly generate number as key</p>\n</li>\n<li>\n<p>Add said random key to aforementioned number</p>\n</li>\n<li>\n<p>Encode key and final encoded message with base64</p>\n</li>\n<li>\n<p>Save encoded key to txt.txt</p>\n</li>\n<li>\n<p>Create an audio file with the encoded message as metadata</p>\n</li>\n<li>\n<p>Zip both files into an archive</p>\n</li>\n</ul>\n<h2>Example</h2>\n<p>For example, let's encrypt the string \"hello\". The shortcut will split each letter apart, creating a list of </p>\n<pre><code>h\ne\nl\nl\no\n</code></pre>\n\n<p>Each character is then converted to ASCII, which becomes </p>\n<pre><code>104\n101\n105\n105\n111\n</code></pre>\n\n<p>For each number, a random \"key\" is generated, which is a random integer from 2 to 750, wihch is then added to the number in the ASCII list. If for example our keys were generated as </p>\n<pre><code>1\n2\n1\n3\n4\n</code></pre>\n\n<p>then our final encrypted message is:</p>\n<pre><code>104 + 1 = 105\n101 + 2 = 103\n105 + 1 = 106\n105 + 3 = 108\n111 + 4 = 115\n</code></pre>\n\n<p>Then the encrypted message and the key are combined with colons and exported.</p>\n<pre><code>encrypted message = 105:103:106:108:115\nfinal key = 1:2:1:3:4\n</code></pre>\n\n<p>To decrypt, run the process in reverse.</p>\n<pre><code>105 - 1 = 104 = h\n103 - 2 = 101 = e\n106 - 1 = 105 = l\n108 - 3 = 105 = l\n115 - 4 = 111 = o\n</code></pre>\n\t\t\t\t","releasenotes":"<p><strong>0.2 - April 14, 2022, 3:18 p.m.</strong></p><p>Finished encoding for metadata of the audio file</p>"}