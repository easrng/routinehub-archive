{"id":"12599","name":"CloudMensis Malware Defense","tagline":"Locates and deletes CloudMensis malware from where it is commonly found.","icon":"ios15 c1440408063 g59870","latest":"34213","description":"\n\t\t\t\t\t<h1>CloudMensis Malware Defense</h1>\n<p>This shortcut runs a bash script, requiring escalated privileges, that searches for indications CloudMensis malware and deletes if found.\nThis shortcut searches for directories, files, and sha1sums that are malicious. \nThe Mensis Cloud malware affects both intel and Apple Silicone Macs\nThe shortcut also includes an alert that displays the results of the script. This shortcut requires shortcut scripting to be enabled.</p>\n<p>Further reading on the CloudMensis malware can be found <a href=\"https://www.welivesecurity.com/2022/07/19/i-see-what-you-did-there-look-cloudmensis-macos-spyware/\">here</a></p>\n<hr>\n<h2>How-To Enable Scripting in Shortcuts</h2>\n<ol>\n<li>Open <code>Shortcuts.app</code> on your Mac</li>\n<li>Hover over the <code>Shortcuts</code> menu bar, then click <code>Preferences</code> or use the <em>âŒ˜,</em> keyboard shortcut</li>\n<li>On the <code>Advanced</code> tab make sure <code>Allow Running Scripts</code> is checked</li>\n</ol>\n<p>3a. You may also need to check the <code>Allow Deleting Large Amounts of Data</code> box</p>\n<hr>\n<h1>The Actual Script</h1>\n<hr>\n<pre><code># check if script is run with elevated permissions\nif [[ $(id -u) != 0 ]]; then\n  echo 'This script must be run as root or using sudo.'\n  exit 1\nfi\n\n# obtain lower permissions user for certain commands\nif [[ -n $SUDO_USER ]]; then\n  real_user=$SUDO_USER\nelse\n  real_user=$(whoami)\nfi\n\n# Helper functions for printing\n# BASH COLORS\n#RED=\"\\e[1;31m\"\n#GREEN=\"\\e[32m\"\n#LGRAY=\"\\e[34;100m\"\n#END_COLOR=\"\\e[0m\"\nRED=\"\"\nGREEN=\"\"\nLGRAY=\"\"\nEND=\"\"\nfunction error_msg () {\n  if [[ -n \"$2\" ]]; then\n    sudo -u $1 echo  $(printf \"${RED}$2${END_COLOR}\")\n  fi\n}\nfunction success_msg () {\n  if [[ -n \"$2\" ]]; then\n    sudo -u $1 echo  $(printf \"${GREEN}$2${END_COLOR}\")\n  fi\n}\nfunction info_msg () {\n  if [[ -n \"$2\" ]]; then\n    sudo -u $1 echo  $(printf \"${LGRAY}$2${END_COLOR}\")\n  fi\n}\n\n#############################################################################\n#                     MALWARE LOCATING FUNCTIONS                            #\n#############################################################################\n\n# IoC: Indicator of Compromise\nIoC_dirs=(\"/Volumes/Data/LeonWork\" \"~/Library/Application Support/com.apple.spotlight/Library\")\nIoC_files=(\"/Library/WebServer/share/httpd/manual/WindowServer\" \"/Library/LaunchDaemons/.com.apple.WindowServer.plist\" \"/Library/WebServer/share/httpd/manual/myexe\" \"/Library/WebServer/share/httpd/manual/MyExecute\" \"~/Library/Containers/com.apple.FaceTime/Data/Library/windowserver\" \"~/Library/Containers/com.apple.Notes/Data/Library/.CFUserTextDecoding\" \"~/Library/Containers/com.apple.languageassetd/loginwindow\" \"~/Library/Application Support/com.apple.spotlight/Resources_V3/.CrashRep\")\nIoC_sha1=(\"D7BF702F56CA53140F4F03B590E9AFCBC83809DB\" \"0AA94D8DF1840D734F25426926E529588502BC08\" \"C3E48C2A2D43C752121E55B909FC705FE4FDAEF6\")\n\nfunction cleanDirs () {\n  local clean=true\n  a=${!1}\n  b=$2'[@]'\n  for malicious_dir in \"${!b}\"; do\n    # echo $malicious_dir\n    if [[ -d $malicious_dir ]]; then\n      rm -rf $malicious_dir\n      if [[ -d $malicious_dir ]]; then\n        error_msg $1 \"${malicious_dir}: Unable to remove\"\n        clean=false\n      else\n        success_msg $1 \"${malicious_dir}: Successfully Removed\"\n      fi\n    fi\n  done\n  if $clean; then\n    info_msg $1 \"Directories seem clean..\"\n    info_msg $1 \"#######################################\"\n  else\n    error_msg $1 \"Something went wrong cleaning the directories..\"\n    info_msg $1 \"#######################################\"\n  fi\n}\n\nfunction cleanFiles () {\n  local clean=true\n  a=${!1}\n  b=$2'[@]'\n  for malicious_file in \"${!b}\"; do\n    # echo $malicious_file\n      if [[ -e $malicious_file ]]; then\n        rm -f $malicious_file\n        if [[ -e $malicious_file ]]; then\n          error_msg $1 \"${malicious_file}: Unable to remove\"\n          clean=false\n        else\n          success_msg $1 \"${malicious_file}: Succesfully removed\"\n        fi\n      fi\n  done\n\n  if $clean; then\n    info_msg $1 \"Files seem clean..\"\n    info_msg $1 \"#######################################\"\n  else\n    error_msg $1 \"Something went wrong cleaning the files..\"\n    info_msg $1 \"#######################################\"\n  fi\n}\n\nfunction checkSHAS () {\n  a=${!1}\n  b=$2'[@]'\n  for ioc_shasum in \"${!b}\"; do\n    # echo $ioc_shasum\n      local hash_sum=\"$(echo $ioc_shasum | tr A-Z a-z)\"\n      local val=\"$(find /Volumes/Data -type f -exec sha1sum {} \\; | grep $hash_sum)\"\n      if [[ -n \"$val\" ]]; then\n        local malware=\"$(echo ${val} | grep -o \"/Volumes/Data/[[:alpha:]]*.*\")\"\n        rm -f $malware\n        if [[ -e \"$malware\" ]]; then\n          error_msg $1 \"${malware} SHA1SUM(${ioc_shasum}): Unable to remove\"\n        else\n          success_msg $1 \"${malware} SHA1SUM(${ioc_shasum}): Succesfully removed\"\n        fi\n      fi\n  done\n}\n\n\nfunction checkSpyAgentConfig () {\n  local clean=true\n  local malware_confs=\"$(sudo -u $1 ls ~/Library/Preferences | sudo -u $1 grep com.apple.iTunesInfo)\"\n  if [[ -n \"$malware_confs\" ]]; then\n      rm -f ~/Library/Preferences/com.apple.iTunesInfo*\n      if [[ -z \"$(sudo -u $1 ls ~/Library/Preferences | sudo -u $1 grep com.apple.iTunesInfo)\" ]]; then\n        success_msg $1 \"Succesfully removed malware config files\"\n      else\n        error_msg $1 \"Error removing malware config files\"\n        clean=false\n      fi\n  fi\n  if $clean; then\n    info_msg $1 \"Configs seem clean..\"\n    info_msg $1 \"#######################################\"\n  else\n    error_msg $1 \"Something went wrong cleaning the configs..\"\n    info_msg $1 \"#######################################\"\n  fi\n}\n\ncleanDirs $real_user \"IoC_dirs\"\ncleanFiles $real_user \"IoC_files\"\ncheckSpyAgentConfig $real_user\n\nif [[ $1 -eq 1 ]]; then\n  checkSHAS $real_user \"IoC_sha1\"\nfi\n\nexit 0\n</code></pre>\n\t\t\t\t","releasenotes":"<p><strong>2.0 - July 21, 2022, 9:36 p.m.</strong></p><p>MAJOR UPDATE! Includes as many possible attack vectors as I could find and has the ability to scan hash codes for identifying malware.</p>"}